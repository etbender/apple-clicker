{"version":3,"sources":["assets/sky-background.jpg","assets/apple.png","components/Button.jsx","components/Apple.jsx","components/GameOverOverlay.jsx","components/GameStartOverlay.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","onClick","_this","props","buttonNum","_this$props","this","xPos","yPos","react_default","a","createElement","width","height","stroke","strokeWidth","fill","y","x","React","Component","Apple","className","xlinkHref","appleImg","GameOverOverlay","Fragment","id","opacity","fontSize","GameStartOverlay","backgroundImg","GAME_LENGTH","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","intervalID","updateTimer","tempSecondsRemaining","state","secondsRemaining","gameEnded","setState","console","log","handleButtonClick","tempAppleLocations","appleLocations","slice","tempScore","score","tempGameEnded","pop","generateApple","restartGame","clearInterval","setInterval","apples","setupApples","gameStarted","i","randomNumber","Math","floor","random","unshift","buttons","push","components_Button","CANVAS_HEIGHT","key","components_Apple","viewBox","renderButtons","renderApples","components_GameOverOverlay","components_GameStartOverlay","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db1979ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sky-background.9751730c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/apple.1fc1361a.png\";","import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n  \r\n  // = () => syntax binds 'this' to the Button instance's this\r\n  onClick = () => {\r\n    this.props.onClick(this.props.buttonNum);\r\n  };\r\n \r\n  render(){\r\n    const {buttonNum, xPos, yPos, onClick} = this.props;\r\n    return(\r\n        <rect width=\"120\" height=\"120\" stroke=\"black\" strokeWidth=\"4\" fill=\"burlywood\" y={yPos} x={xPos} onClick={this.onClick}/>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n\r\n\r\n","import React from 'react';\r\nimport appleImg from \"../assets/apple.png\"\r\n\r\nclass Apple extends React.Component {\r\n  \r\n  //<circle cx={xPos} cy={yPos} r=\"60\" stroke=\"black\" strokeWidth=\"3\" fill=\"crimson\" className=\"Apple\"/>\r\n  \r\n  render(){\r\n    const {xPos, yPos} = this.props;\r\n    \r\n    return(\r\n      <image x={xPos} y={yPos} height=\"120\" width=\"120\" className=\"Apple\" xlinkHref={appleImg}/>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default Apple;","import React from 'react';\r\n\r\nclass GameOverOverlay extends React.Component {\r\n  \r\n  render(){\r\n    return (\r\n      <>\r\n        <rect height=\"100%\" stroke=\"black\" strokeWidth=\"4\" fill=\"black\" id=\"resetGameOverlay\" opacity=\"0.85\"/>\r\n        <rect height=\"15%\" fill=\"black\" y=\"210\" />\r\n        <text x=\"225\" y=\"300\" fill=\"darkred\" id=\"youDiedText\">YOU DIED</text>\r\n        <text fontSize=\"32\" x=\"150\" y=\"500\" onClick={this.props.onClick} fill=\"orange\">Press here to restart.</text>\r\n      </>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default GameOverOverlay;","import React from 'react';\r\nimport backgroundImg from '../assets/sky-background.jpg'\r\n\r\nclass GameStartOverlay extends React.Component {\r\n  \r\n  //<rect height=\"100%\" stroke=\"black\" strokeWidth=\"4\" fill=\"purple\" id=\"startGameOverlay\" opacity=\"1\" onClick={this.onClick}/>\r\n  \r\n  render(){\r\n    return (\r\n      <>\r\n        <image height=\"100%\" xlinkHref={backgroundImg} id=\"startGameOverlay\" onClick={this.onClick}/>\r\n        <text fontSize=\"32\" x=\"150\" y=\"500\" id=\"gameStartText\" onClick={this.props.onClick}>Press anywhere to begin!</text>\r\n      </>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nexport default GameStartOverlay;","import React from 'react';\r\nimport Button from './Button';\r\nimport Apple from './Apple';\r\nimport GameOverOverlay from './GameOverOverlay'\r\nimport GameStartOverlay from './GameStartOverlay'\r\nimport backgroundImg from '../assets/sky-background.jpg'\r\n\r\nconst BUTTON_WIDTH = 120;\r\nconst CANVAS_HEIGHT = 1000;\r\nconst CANVAS_WIDTH = 600;\r\nconst GAME_LENGTH = 15;\r\nconst NUMBER_OF_COLUMNS = 5;\r\nconst NUMBER_OF_ROWS = 8;\r\n\r\nclass Game extends React.Component {\r\n  \r\n  intervalID = null;\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    \r\n    var apples = this.setupApples();\r\n    \r\n    this.state = {\r\n      appleLocations: apples,\r\n      score: 0,\r\n      gameEnded: false,\r\n      secondsRemaining: GAME_LENGTH,\r\n      gameStarted: false,\r\n    }\r\n  }\r\n  \r\n  componentWillUnmount(){\r\n    clearInterval(this.intervalID);\r\n  }\r\n  \r\n  \r\n  updateTimer = () => {\r\n    var tempSecondsRemaining = this.state.secondsRemaining;\r\n    tempSecondsRemaining -= 1;\r\n    \r\n    if(!this.state.gameEnded){\r\n      if(tempSecondsRemaining > 0){\r\n        this.setState({\r\n          secondsRemaining: tempSecondsRemaining,\r\n        })\r\n      }\r\n      else{\r\n        this.setState({\r\n          gameEnded: true,\r\n          secondsRemaining: tempSecondsRemaining\r\n        })\r\n        console.log(this.state.secondsRemaining + \" seconds remaining\");\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n  //returns initial array of apples\r\n  setupApples(){\r\n    var appleLocations = [];\r\n    for(var i = 0; i < 8; i++){\r\n      var randomNumber = Math.floor(Math.random()*5); // random number between 0 and 4\r\n      appleLocations.unshift(randomNumber);\r\n    }\r\n    return appleLocations;\r\n  }\r\n  \r\n  //adds one apple to argument\r\n  generateApple(apples){\r\n    var randomNumber = Math.floor(Math.random()*5); // random number between 0 and 4\r\n    apples.unshift(randomNumber);\r\n    return apples;\r\n  }\r\n  \r\n  handleButtonClick = (buttonNum) =>{\r\n    \r\n    if(this.state.gameEnded){\r\n      return;\r\n    }\r\n    \r\n    var tempAppleLocations = this.state.appleLocations.slice();\r\n    var tempScore = this.state.score;\r\n    var tempGameEnded = this.state.gameEnded;\r\n    \r\n    \r\n    var appleLocation = tempAppleLocations.pop();\r\n    \r\n    \r\n    //user pressed right button\r\n    if(appleLocation === buttonNum){\r\n      tempScore +=1;\r\n      tempAppleLocations = this.generateApple(tempAppleLocations);\r\n    \r\n      this.setState({\r\n        appleLocations: tempAppleLocations,\r\n        score: tempScore,\r\n      })\r\n    }\r\n    \r\n    //user pressed wrong button\r\n    else{\r\n      tempGameEnded = true;\r\n      this.setState({\r\n        gameEnded: tempGameEnded\r\n      })\r\n    }\r\n  }\r\n  \r\n  restartGame = () => {\r\n    clearInterval(this.intervalID);\r\n    this.intervalID = setInterval(this.updateTimer, 1000);\r\n    \r\n    var apples = this.setupApples();\r\n    \r\n    this.setState({\r\n      appleLocations: apples,\r\n      score: 0,\r\n      gameEnded: false,\r\n      secondsRemaining: GAME_LENGTH,\r\n      gameStarted: true,\r\n    })\r\n  }\r\n  \r\n  renderButtons(){\r\n    const buttons = [];\r\n    for(let i = 0; i < NUMBER_OF_COLUMNS; i++){\r\n      buttons.push(<Button yPos={CANVAS_HEIGHT - BUTTON_WIDTH} xPos={i*BUTTON_WIDTH} onClick={this.handleButtonClick} buttonNum={i} key={i}/>);\r\n    }\r\n    return buttons;\r\n  }\r\n  \r\n  renderApples(){\r\n    const apples = [];\r\n    for(let i = 0; i < NUMBER_OF_ROWS; i++){\r\n      apples.push(<Apple yPos={CANVAS_HEIGHT - (NUMBER_OF_ROWS - i)*BUTTON_WIDTH} xPos={this.state.appleLocations[i]*BUTTON_WIDTH} key={i}/>);\r\n    }\r\n    return apples;\r\n  }\r\n  \r\n  render(){\r\n    //const {score, secondsRemaining, appleLocations, gameEnded, gameStarted} = this.state;\r\n    return(\r\n        <div className=\"game\" id=\"game\">\r\n\r\n          <div className=\"game-contents\">\r\n            <div className=\"topbar\">\r\n              <p id=\"scoreCounter\">{\"Score: \"+this.state.score}</p>\r\n              <p id=\"timeCounter\">{\"Time: \"+this.state.secondsRemaining +\" seconds\"}</p>\r\n            </div>\r\n            <svg id=\"apple-clicker-canvas\" viewBox={\"0 0 \"+CANVAS_WIDTH+\" \"+CANVAS_HEIGHT}>\r\n              \r\n              <image height=\"100%\" xlinkHref={backgroundImg} width={CANVAS_WIDTH}/>\r\n              {this.renderButtons()}\r\n              {this.renderApples()}\r\n              \r\n              { \r\n                this.state.gameEnded &&\r\n                <GameOverOverlay onClick={this.restartGame}/>\r\n              }\r\n              \r\n              {\r\n                !this.state.gameStarted &&\r\n                <GameStartOverlay onClick={this.restartGame}/>\r\n              }\r\n              \r\n            </svg>\r\n            <div className=\"bottombar\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './components/Game'\n\nclass App extends Component {\n  \n  componentDidMount(){\n  }\n  \n  \n  render() {\n    return (\n      <Game />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}